#include <bits/stdc++.h>
using namespace std;
class Graph{
  std::list<int>*adj ;
 int V;
void fillstack(int v,bool visited[],std::stack<int> &s);
  void dfsutil(int v,bool visited[]);
  
  public:
    Graph(int V);
    void addedge(int u,int v);
    void checkscc();
    Graph get_transpose();
  
};

void Graph::dfsutil(int v,bool visited[])
{
    visited[v]=true;
    cout<<v<<" ";
    list<int>::iterator itr;
    
    for(auto itr:adj[v])
    {
        if(!visited[itr])
        {
            dfsutil(itr,visited);
        }
    }
}
void Graph::fillstack(int v,bool visited[],std::stack<int> &s)
{
visited[v]=true;
    for(auto i:adj[v] )
    {
        if(!visited[i])
        fillstack(i,visited,s);
    }
    
    s.push(v);

}

Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}

void Graph::addedge(int u,int v)
{
  adj[u].push_back(v);    
}

Graph Graph::get_transpose()
{
    Graph g(V);
    
    for(int v=0;v<V;v++)
    {
        for(auto x:adj[v])
        {
        g.adj[x].push_back(v);
        }

    }
    return g;
}
void Graph::checkscc()
{
    bool *visited=new bool[V];
    stack<int> s;
    for(int i=0;i<V;i++)
    {
        visited[i]=false;
    }
    
    for(int i=0;i<V;i++)
    {
        if(visited[i]==false)
        {
          fillstack(i,visited,s);
        }
    
    }
    
    Graph gx=get_transpose();
    
    for(int i=0;i<V;i++)
    {
        visited[i]=false;
    }
    
    while(s.empty()==false)
    {
        int v=s.top();
        s.pop();
        
        if(visited[v]==false)
        {
            gx.dfsutil(v,visited);
            cout<<endl;
        }
    }
    
}

int main()
{
    Graph g(5);
    g.addedge(1,0);
    g.addedge(0,2);
    g.addedge(2,1);
    g.addedge(0,3);
    g.addedge(3,4);
    cout<<"Connected componets in graph are: \n";
    g.checkscc();
    
    return 0;
}
