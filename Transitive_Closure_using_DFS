#include<bits/stdc++.h> 
using namespace std;
class Graph 
{ 
    int V; // No. of vertices 
    bool **tc; // To store transitive closure 
    list<int> *adj; // array of adjacency lists 
    void DFSUtil(int u, int v); 
public: 
    Graph(int V); 
  
   
    void addEdge(int v, int w) { adj[v].push_back(w); } 
  
   void transitiveClosure(); 
}; 

Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
    
    tc=new bool* [V];
    for(int i=0;i<V;i++)
    {
        tc[i]=new bool[V];
        memset(tc[i],false,V*sizeof(bool));
    }
    
}

void Graph::DFSUtil(int s,int d)
{
    tc[s][d]=true; // Mark reachability from s to d as true. 
    
    for(auto i:adj[d]) // Find all the vertices reachable through d
    {
        if(tc[s][i]==false)
        DFSUtil(s,i);
    }
}
void Graph::transitiveClosure()
{
    for(int i=0;i<V;i++)
    {
        DFSUtil(i,i);
    }
for(int i=0;i<V;i++)
{
    for(int j=0;j<V;j++)
    {
        cout<<tc[i][j]<<" ";
    }
    cout<<endl;
}
    
}
int main() 
{ 
    
    Graph g(4); 
    g.addEdge(0, 1); 
    g.addEdge(0, 2); 
    g.addEdge(1, 2); 
    g.addEdge(2, 0); 
    g.addEdge(2, 3); 
    g.addEdge(3, 3); 
    cout << "Transitive closure matrix is \n"; 
    g.transitiveClosure(); 
    return 0; 
} 
