#include <bits/stdc++.h>
#include<iostream>
using namespace std;
class Graph{
    int V;
    list<int>*adj;
    public:
    Graph(int V);
    void addedge(int u,int v);
    void BFS(int s);
    void printlist();
};

Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}

void Graph::addedge(int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

void Graph::BFS(int s) {
    
   bool *visited=new bool[V];
   for(int i=0;i<V;i++)
   {
       visited[i]=false;
   }
   
   list<int>data;
   visited[s]=true;
   data.push_back(s);
   
   while(!data.empty())
   {
       s=data.front();
       std::cout << s <<"\t" ;
       data.pop_front();
       
       for(auto j:adj[s])
       {
           if(!visited[j])
           {
               visited[j]=true;
               data.push_back(j);
           }
       }
   }
   
}

void Graph::printlist()
{
     for(int v=0;v<V;v++)
    {
   
    cout<<"\nAdjacency list of vertex "<<v;   
    
     for(auto &i:adj[v])
     {
         cout<<" ->"<<i;
     }
     cout<<"\n";
    }
}

int main()
{
   Graph g(4);
   g.addedge(0,1);
   g.addedge(0,2);
   g.addedge(1, 2); 
   g.addedge(2, 3); 
   g.printlist();
   cout<<"\nBFS Traversal of Graph is :\n";
   g.BFS(0);
   return 0;
}
