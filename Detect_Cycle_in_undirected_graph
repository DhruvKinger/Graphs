#include<bits/stdc++.h>
using namespace std;
class Graph{
   int V; //no of vertices
   list<int> *adj; //Pointer to an array containing adjacency list
   bool isCyclicUtil(int v,bool visited[],int parent);
   
    public:
    Graph(int V);
    void addEdge(int u,int v);
    bool isCycle();
    
};

Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}
void Graph::addEdge(int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
    
}

   bool Graph::isCyclicUtil(int v,bool visited[], int parent) 
  {
       visited[v]=true;
       
       list<int>:: iterator itr;
       for(itr=adj[v].begin();itr!=adj[v].end();itr++)
       {
           if(!visited[*itr])
           {
               isCyclicUtil(*itr,visited,v);
               
           }
           else if(*itr!=parent)
           {
               return true;
                  // If an adjacent vertex is visited and
                  // is not parent of current vertex,
                  // then there exists a cycle in the graph.
           }
       }
       return false;
  }
  
bool Graph::isCycle()
{
  bool *visited=new bool[V];
  for(int i=0;i<V;i++)
  {
      visited[i]=false;  // Mark all the vertices as not visited
  }
  
  for(int u=0;u<V;u++)
  {
      if(!visited[u])
      {
          if(isCyclicUtil(u,visited,-1))
          return true;
      }
      
  }
  return false;
 
}
    
int main()
{
   Graph g1(5); 
    g1.addEdge(1, 0); 
    g1.addEdge(0, 2); 
    g1.addEdge(2, 1); 
    g1.addEdge(0, 3); 
    g1.addEdge(3, 4); 
    (g1.isCycle())?cout<<"Yes it has a cycle":cout<<"No cycle, present";
    cout<<endl;
     Graph g2(3); 
    g2.addEdge(0, 1); 
    g2.addEdge(1, 2); 
    g2.isCycle()? cout << "Graph contains cycle\n": 
                   cout << "Graph doesn't contain cycle\n"; 
  
      return 0;
}
