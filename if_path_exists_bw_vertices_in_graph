#include <iostream>
using namespace std;
#include<bits/stdc++.h>
class Graph
{
    int V;
    list<int> *adj;
    public:
    Graph(int V);
    void addedge(int v,int w);
    bool checkpath(int s,int d);
};
Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}

void Graph::addedge(int v,int w)
{
adj[v].push_back(w);
}

bool Graph::checkpath(int s,int d)
{
    if(s==d)
    {
        return true;
    }
    
    bool *visited=new bool[V];
    for(int i=0;i<V;i++)
    {
        visited[i]=false;
        
    }
    std::queue<int> q ;
    visited[s]=true;
    q.push(s);
    while(!q.empty())
    {
        int s=q.front();
        q.pop();
    
        for(auto itr:adj[s])
        {
            if(itr==d)
            {
                return true;
            }
            
            if(!visited[itr])
            {
                visited[itr]=true;
                q.push(itr);
                
            }
        }
    }
   return false; 
}

int main()
{
 Graph g(4);
 g.addedge(0,1);
 g.addedge(0,2);
 g.addedge(1, 2); 
    g.addedge(2, 0); 
    g.addedge(2, 3); 
    g.addedge(3, 3); 

int u = 3, v = 2; 
    if(g.checkpath(u, v)) 
        cout<< "\n There is a path from " << u << " to " << v; 
    else
        cout<< "\n There is no path from " << u << " to " << v; 
  
    u = 3, v = 1; 
    if(g.checkpath(u, v)) 
        cout<< "\n There is a path from " << u << " to " << v; 
    else
        cout<< "\n There is no path from " << u << " to " << v; 
  
    return 0;
}
