#include <bits/stdc++.h>
using namespace std;

const int MAX=1000;
int id[MAX],nodes,edges;
pair<long long,pair<int,int>> p[MAX];

void init()
{
    for(int i=0;i<MAX;i++)
    {
        id[i]=i; //initialize parent array
    }
}

int find(int x)
{
    while(id[x]!=x) // if x is not a parent of itself update x
    {
        id[x]= id[id[x]];
        x=id[x];
    }
    return x;
}

void unionx(int x,int y)
{
     int u=find(x);
     int v=find(y);
     id[u]=id[v];
}

long long kruskal(pair<long long,pair<int,int>>p[]) //sorted p passed to funcn
{
    int x,y;
    long long cost,min_cost=0;

    for(int i=0;i<edges;i++)
    {
     x=p[i].second.first;
     y=p[i].second.second;
     cost=p[i].first;
    
      if(find(x)!=find(y))
     {
        min_cost+=cost;
        unionx(x,y);
     }
    
        
    }
    
    return min_cost;
}

int main()
{
    int x,y;
    long long weight,cost,min_cost;
    init();
    cin>>nodes>>edges; // enter vertices & edges
    for(int i=0;i<edges;i++)
    {
        cin>>x>>y>>weight; // add source,destn,and weight
        p[i]=make_pair(weight,make_pair(x,y));
    }
    sort(p,p+edges); // sorts them
    min_cost=kruskal(p);
    cout<<min_cost<<endl;
    return 0;
}
