
#include <iostream>
using namespace std;
#include<bits/stdc++.h>
class Graph
{
    int V;
    list<int> *adj;
    public:
    Graph(int V);
    void addedge(int v,int w);
    void DFS();
    void element_caller(int v,bool visited[]);
};
Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}

void Graph::addedge(int v,int w)
{
adj[v].push_back(w);
}

void Graph:: element_caller(int v,bool visited[])
{
    visited[v]=true;
    cout<<v<<" ";

   list<int>::iterator i;
    for(i=adj[v].begin();i!=adj[v].end();i++)
    {
        if(!visited[*i])
        {
         element_caller(*i,visited);   
        }
    }    
}
void Graph::DFS()
{
    bool *visited=new bool[V];
    for(int i=0;i<V;i++)
    {
        visited[i]=false;
    }
     for(int i=0;i<V;i++)
    {
         if(visited[i]==false)
         element_caller(i,visited);
    }

}

int main()
{
 Graph g(4);
 g.addedge(0,1);
 g.addedge(0,2);
 g.addedge(1, 2); 
    g.addedge(2, 0); 
    g.addedge(2, 3); 
    g.addedge(3, 3); 
    cout<<"DFS Traversal of Graph is :\n";
g.DFS();
    return 0;
}
