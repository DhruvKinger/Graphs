#include <bits/stdc++.h>
#include<iostream>
using namespace std;
class Graph{
    int V;
    list<int>*adj;
    public:
    Graph(int V);
    void addedge(int u,int v);
    void DFS();
    void indv_element(int v,bool visited[]);
    void printlist();
};

Graph::Graph(int V)
{
    this->V=V;
    adj=new list<int>[V];
}

void Graph::addedge(int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

void Graph::indv_element(int v,bool visited[])
{
    visited[v]=true;
    cout<<v<<" ";
    
    for(auto j:adj[v])
    {
        if(!visited[j])
        {
            indv_element(j,visited);
        }
    }
}

void Graph::DFS() {
    
    bool *visited=new bool[V];
    for (int i=0;i<V;i++){
        visited[i]=false;
    }
    
    for(int i=0;i<V;i++)
    {
        if(!visited[i])
        {
           indv_element(i,visited); 
        }
    }
}

void Graph::printlist()
{
     for(int v=0;v<V;v++)
    {
   
    cout<<"\nAdjacency list of vertex "<<v;   
    
     for(auto &i:adj[v])
     {
         cout<<" ->"<<i;
     }
     cout<<"\n";
    }
}

int main()
{
   Graph g(4);
   g.addedge(0,1);
  // g.addedge(0,2);
   g.addedge(1, 2); 
   g.addedge(2, 3); 
   g.printlist();
   cout<<"\nDFS Traversal of Graph is :\n";
   g.DFS();
   return 0;
}
